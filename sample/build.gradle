buildscript {
    dependencies {
        //google()
        classpath 'com.android.tools.build:gradle:3.6.3'
        //classpath 'com.android.tools.build:gradle:3.1.4'
        //classpath 'com.android.tools.build:gradle:3.4.0'
        classpath dep.androidPlugin
        //    classpath 'me.tatarka:gradle-retrolambda:3.2.5'
        classpath 'com.android.tools.build.jetifier:jetifier-processor:1.0.0-beta02'

        classpath 'com.android.tools.build:gradle:3.3.0-rc01'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72'
        classpath 'com.jakewharton:butterknife-gradle-plugin:10.0.0'
        classpath 'com.jakewharton:butterknife-gradle-plugin:10.0.0'
        // classpath dep.butterknifePlugin

        // Add the Google Services plugin (check for v3.1.2 or higher).4.1.0
        classpath 'com.google.gms:google-services:4.3.3'
        classpath dep.apolloPlugin
        // Add the Fabric Crashlytics plugin.
        //    classpath 'io.fabric.tools:gradle:1.28.0'
        //Add the Crashlytics Gradle plugin.
        //classpath 'com.google.firebase:firebase-crashlytics-gradle:2.0.0-beta01'
        //classpath 'io.fabric.tools:gradle:1.+'
    }


    repositories {
        jcenter()
        google()
        maven { url 'https://maven.fabric.io/public' }
    }

}
allprojects {
//    tasks.withType(JavaCompile) {
//        options.compilerArgs << "-Xlint:deprecation"
//    }
    repositories {

        configurations.all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->

                def requested = details.requested

                if (requested.group == 'com.google.firebase') {
                    if (requested.name == 'firebase-crashlytics') {
                        details.useVersion '17.0.0-beta01'
                    } else {
                        details.useVersion '17.0.0'
                    }
                }

                if (requested.group == 'com.google.android.gms') {
                    details.useVersion '17.0.0'
                }
            }
        }

        maven { url 'https://maven.google.com' }
        mavenLocal()
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
        //   maven { url 'https://maven.fabric.io/public' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        flatDir {
            dirs 'libs'
        }
    }
}


apply plugin: 'com.android.application'
//apply plugin: 'me.tatarka.retrolambda'

tasks.whenTaskAdded { task ->
    if (task.name.startsWith("lint")) {
        task.enabled = false
    }
}


//retrolambda {
//    jvmArgs '-noverify'
//}
apply plugin: 'com.jakewharton.butterknife'
//apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.apollographql.android'
//Add the Fabric plugin.
//apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.crashlytics'
android {
/*compileSdkVersion androidConfig.compileSdkVersion
  buildToolsVersion androidConfig.buildToolsVersion*/
/*compileSdkVersion 28
  buildToolsVersion '23.0.2'*/
    flavorDimensions "default"
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    aaptOptions {
        cruncherEnabled = false
    }
    defaultConfig {
        applicationId "com.level_sense.app"
        minSdkVersion 19
        targetSdkVersion 28
        targetSdkVersion androidConfig.targetSdkVersion
        versionCode 8
        versionName "1.0.7"
        useLibrary "org.apache.http.legacy"
        //Enabling multidex support.
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }


    configurations {
        all*.exclude group: 'com.android.support', module: 'support-v4'

    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    buildTypes {
        all {
            buildConfigField 'okhttp3.logging.HttpLoggingInterceptor.Level', 'OKHTTP_LOG_LEVEL', 'okhttp3.logging.HttpLoggingInterceptor.Level.BODY'

            //We pull the shop settings either from the Environment or a file called shop.properties at the root of the project.
            //Environment variables will take precedence, we will attempt to read those first.
            def shopDomain
            def apiKey
            def androidPayPublicKey
            def androidPayEnvironment

            //get the shop setting from the environment if there any
            shopDomain = System.getenv("SHOP_DOMAIN")
            apiKey = System.getenv("API_KEY")
            androidPayPublicKey = System.getenv("ANDROID_PAY_PUBLIC_KEY")
            androidPayEnvironment = System.getenv("ANDROID_PAY_ENVIRONMENT")

            //pull the store properties from the local file if it exists.  Environment variables take precedence
            def shopProperties = new Properties();
            File shopPropertiesFile = project.file('shop.properties')

            if (shopPropertiesFile.exists()) {
                shopProperties.load(new FileInputStream(shopPropertiesFile))
                shopDomain = shopDomain ?: shopProperties["SHOP_DOMAIN"]
                apiKey = apiKey ?: shopProperties["API_KEY"]
                androidPayPublicKey = androidPayPublicKey ?: shopProperties["ANDROID_PAY_PUBLIC_KEY"]
                androidPayEnvironment = androidPayEnvironment ?: shopProperties["ANDROID_PAY_ENVIRONMENT"]
            }

            if (!shopDomain) {
                shopDomain = ""
            }
            if (!apiKey) {
                apiKey = ""
            }
            if (!androidPayPublicKey) {
                androidPayPublicKey = ""
            }
            if (!androidPayEnvironment) {
                //androidPayEnvironment = "com.google.android.gms.wallet.WalletConstants.ENVIRONMENT_SANDBOX"//this deprecated
                androidPayEnvironment = "com.google.android.gms.wallet.WalletConstants.ENVIRONMENT_TEST"
            }

            buildConfigField "String", "SHOP_DOMAIN", "\"" + shopDomain.toString() + "\""
            buildConfigField "String", "API_KEY", "\"" + apiKey.toString() + "\""
            buildConfigField "String", "ANDROID_PAY_PUBLIC_KEY", "\"" + androidPayPublicKey.toString() + "\""
            buildConfigField "int", "ANDROID_PAY_ENVIRONMENT", androidPayEnvironment

            //debuggable = false
            minifyEnabled = false
        }

    }

    productFlavors {
        shopify {
        }

        xApollo {
        }
    }

    lintOptions {
        abortOnError false
    }
    firebaseCrashlytics {
        // Enable processing and uploading of native symbols to Crashlytics
        // servers. By default, this is disabled to improve build speeds.
        // This flag must be enabled to see properly-symbolicated native
        // stack traces in the Crashlytics dashboard.
        nativeSymbolUploadEnabled true
    }
}
//crashlytics {
//    enableNdk true
//}

dependencies {

    def lifecycle_version = "1.1.1"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.0.0'

    // Room components
    def roomVersion = '1.1.1'
    implementation 'androidx.room:room-runtime:2.0.0'
    implementation 'androidx.room:room-rxjava2:2.1.0-alpha03'
    annotationProcessor 'androidx.room:room-compiler:2.0.0'
    androidTestImplementation 'androidx.room:room-testing:2.0.0'

    implementation 'android.arch.persistence.room:runtime:1.1.0'
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.0'


    //implementation "com.android.support:recyclerview-v7:28.0.0"
    //implementation "com.android.support:cardview-v7:25.2.0"
    //implementation 'com.android.support:support-v4:28.0.0â€™

//    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.3.0'
    // implementation group: 'com.google.firebase', name: 'firebase-crashlytics-gradle', version: '2.0.0-beta02'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.annotation:annotation:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.android.support:design:28.0.0-alpha3'

    //"com.android.support:design:$versions.androidSupportVersion",
    /*  implementation dep.androidSupportDesign
      implementation dep.androidSupportV4
      implementation dep.androidSupportV7
      implementation dep.androidSupportAnnotations*/
    //compile dep.rxAndroid
    //compile dep.rxJava
    implementation dep.timber
    //compile dep.butterKnife
    //annotationProcessor dep.butterKnifeCompiler
    implementation(dep.fresco) {
        exclude group: 'com.android.support'
    }
    /*compile(dep.fresco){
      exclude group: 'com.android.support'
  }*/
    implementation 'com.shopify.mobilebuysdk:buy3:3.1.1'
    //optional library to help with Android Pay purchase flow
    implementation 'com.shopify.mobilebuysdk:buy3-pay-support:1.0.2'
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'
    implementation 'com.squareup.picasso:picasso:2.71828'

    implementation 'com.squareup.retrofit2:converter-gson:2.0.2'
    implementation 'com.tapadoo.android:alerter:1.0.7'
    implementation 'com.wang.avi:library:2.1.3'
    implementation 'com.nineoldandroids:library:2.4.0'
    //sdp
    implementation 'com.intuit.sdp:sdp-android:1.0.6'
    //todo for ccp
    implementation 'com.hbb20:ccp:1.7.1'
    /*compile 'com.jjoe64:graphview:4.2.1'*/
//    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.3.0'
    implementation dep.constraintLayout
    implementation dep.rxrelay
    implementation dep.archRuntime
    implementation dep.archExt
    annotationProcessor dep.arcCompiler
    xApolloImplementation dep.apolloRuntime
    xApolloImplementation dep.okhttpLogging
    xApolloImplementation dep.apolloHttpCache
    implementation project(':GraphView-master')
    /* xApolloCompile dep.apolloRuntime
  xApolloCompile dep.okhttpLogging
  xApolloCompile dep.apolloHttpCache
  compile project(':GraphView-master')*/
    /*compile('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true;
    }*/
    //compile 'com.android.support:multidex:1.0.3'
    //compile 'com.android.support:multidex:1.0.0'

    implementation 'androidx.multidex:multidex:2.0.1'

    //todo for resolve dependancy versioning issue
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
    implementation 'com.google.firebase:firebase-auth:19.2.0'
    //Add the Firebase Crashlytics dependency.
    implementation 'com.google.firebase:firebase-core:17.2.3'
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0-beta01'
    //    implementation 'com.google.firebase:firebase-crashlytics:17.0.0-beta01'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.14'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

}

task downloadApolloSchema(type: DefaultTask, group: "GraphQL", description: "Download GraphQL store front API schema") {
    doLast {
        println("Downloading GraphQL schema...")
        def schemaFile = new File(project.projectDir.absolutePath + '/src/xApollo/graphql/com/shopify/sample/domain/schema.json')
        if (schemaFile.exists()) {
            schemaFile.delete()
        }
        new URL('https://app.shopify.com/services/ping/storefront_graphql_schema').withInputStream { i ->
            schemaFile.withOutputStream {
                it << i
            }
        }
        println("GraphQL schema has been downloaded!")
    }

}
apply plugin: 'com.google.gms.google-services'

//apply plugin: 'me.tatarka.retrolambda'

/*apollo{
  customTypeMapping['URL'] = "String"
  customTypeMapping['HTML'] = "String"
  customTypeMapping['Money'] = "java.math.BigDecimal"
  nullableValueType = "apolloOptional"
  generateAccessors = false
  useSemanticNaming = false
}*/