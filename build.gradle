subprojects {
    def projectName = it.name

    if (projectName != "graphql-java-support") {
        apply from: "../gradle/dependencies.gradle"
    }

    buildscript {
        System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'
        repositories {
            jcenter()
            google()
            maven { url 'https://maven.fabric.io/public' }
            maven { url "https://jitpack.io" }
            maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
            /*maven {url 'https://maven.fabric.io/public' }*/
            /*dependencies{
               classpath 'io.fabric.tools:gradle:1.27.1'
             }*/
        }
        dependencies {
            // ...
            classpath 'com.google.firebase:firebase-crashlytics-gradle:2.0.0-beta02'

            // Add the Google Services plugin (check for v3.1.2 or higher).
            classpath 'com.google.gms:google-services:4.3.3'
            classpath 'com.jakewharton:butterknife-gradle-plugin:10.2.1'
            // Add the Fabric Crashlytics plugin.
           // classpath 'io.fabric.tools:gradle:1.31.2'

        }
    }
    repositories {
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url 'https://maven.google.com' }
        google()

    //    maven { url 'https://maven.fabric.io/public' }
    }


    if (projectName != "graphql-java-support") {
        apply plugin: 'checkstyle'

        checkstyle {
            //toolVersion = "5.6"
            toolVersion = "5.9"
            configFile rootProject.file('checkstyle.xml')
            configProperties = ['checkstyle.cache.file': rootProject.file('build/checkstyle.cache')]
            ignoreFailures false
            showViolations true
        }

        task checkstyle(type: Checkstyle) {
            source 'src/main/java'
            include '**/*.java'
            classpath = files()
        }

        afterEvaluate {
            if (project.tasks.findByName('check')) {
                check.dependsOn('checkstyle')
            }
        }
    }
}

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {

    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }

    }

}

repositories {
    google()
}